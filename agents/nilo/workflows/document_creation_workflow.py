"""
Document Creation Workflow para o sistema modular de cria√ß√£o de documentos.

Este workflow implementa:
1. Template Selection - Sele√ß√£o do template quando o agente tem m√∫ltiplos templates
2. Document Creation - Cria√ß√£o do documento cl√°usula por cl√°usula
3. Live Preview - Visualiza√ß√£o em tempo real do documento sendo criado
"""

from typing import Iterator, AsyncIterator, List, Dict, Optional, Any
from agno.workflow import Workflow, RunResponse
from agno.agent import Agent
from agno.team import Team
from agno.models.openai import OpenAIChat

import os
from database.nda_database import NDADatabaseCrud
from models.doc_template import DocTemplate
from models.template_clause import TemplateClause
from models.live_document import LiveDocument
from tools.document_tools import (
    start_document_creation,
    process_clause_response,
    get_live_preview,
    complete_document,
    ClauseInfo,
    DocumentInfo
)


class DocumentCreationWorkflow(Workflow):
    """
    Workflow para cria√ß√£o de documentos baseado em templates.
    
    Este workflow gerencia o processo completo de cria√ß√£o de documentos:
    1. Sele√ß√£o do template apropriado (quando m√∫ltiplos est√£o dispon√≠veis)
    2. Processamento sequencial de cl√°usulas (obrigat√≥rias e opcionais)
    3. Visualiza√ß√£o em tempo real do documento sendo criado
    4. Finaliza√ß√£o e gera√ß√£o do documento completo
    """
    
    def __init__(self, agent_id: str, db_url: str, user_id: str):
        """
        Inicializa o workflow com o agente, banco de dados e usu√°rio.
        
        Args:
            agent_id: ID do agente que est√° executando o workflow
            db_url: URL de conex√£o com o banco de dados
            user_id: ID do usu√°rio que est√° criando o documento
        """
        super().__init__()
        self.agent_id = agent_id
        self.user_id = user_id
        self.db = NDADatabaseCrud(db_url)
        
        # Template Selection Agent
        self.template_selector = Agent(
            name="Template Selector",
            role="Ajudar o usu√°rio a escolher o template de documento adequado",
            model=OpenAIChat(id="gpt-4o"),
            instructions=[
                "Apresente os templates dispon√≠veis de forma clara e organizada",
                "Explique o prop√≥sito de cada template",
                "Ajude o usu√°rio a escolher o template mais adequado para sua necessidade",
                "Confirme a sele√ß√£o antes de prosseguir",
                "Use linguagem simples e direta"
            ]
        )
        
        # Document Creator Team
        self.document_creator_team = Team(
            name="Document Creation Team",
            mode="coordinate",
            model=OpenAIChat(id="gpt-4o"),
            members=[
                self._create_clause_processor(),
                self._create_validator(),
                self._create_preview_agent()
            ],
            instructions=[
                "Crie documentos processando cada cl√°usula individualmente",
                "Valide cada se√ß√£o minuciosamente",
                "Forne√ßa atualiza√ß√µes de preview em tempo real",
                "Garanta um resultado profissional e completo",
                "Siga a ordem das cl√°usulas conforme definido no template"
            ]
        )
    
    def _create_clause_processor(self) -> Agent:
        """Cria o agente respons√°vel por processar cada cl√°usula."""
        return Agent(
            name="Clause Processor",
            role="Processar cada cl√°usula do documento coletando informa√ß√µes do usu√°rio",
            model=OpenAIChat(id="gpt-4o"),
            tools=[
                start_document_creation,
                process_clause_response
            ],
            instructions=[
                "Use o system_prompt da cl√°usula para formular perguntas ao usu√°rio",
                "Colete todas as informa√ß√µes necess√°rias para preencher os placeholders",
                "Explique claramente o prop√≥sito de cada cl√°usula",
                "Forne√ßa exemplos e sugest√µes quando apropriado",
                "Confirme as informa√ß√µes antes de finalizar cada cl√°usula"
            ]
        )
    
    def _create_validator(self) -> Agent:
        """Cria o agente respons√°vel por validar as informa√ß√µes coletadas."""
        return Agent(
            name="Content Validator",
            role="Validar as informa√ß√µes coletadas para cada cl√°usula",
            model=OpenAIChat(id="gpt-4o"),
            instructions=[
                "Verifique se todas as informa√ß√µes necess√°rias foram coletadas",
                "Valide o formato e conte√∫do das informa√ß√µes",
                "Alerte sobre poss√≠veis inconsist√™ncias ou problemas",
                "Sugira corre√ß√µes quando necess√°rio",
                "Aplique as regras de valida√ß√£o definidas para cada cl√°usula"
            ]
        )
    
    def _create_preview_agent(self) -> Agent:
        """Cria o agente respons√°vel por gerar previews do documento."""
        return Agent(
            name="Preview Agent",
            role="Gerar previews do documento em tempo real",
            model=OpenAIChat(id="gpt-4o"),
            tools=[
                get_live_preview,
                complete_document
            ],
            instructions=[
                "Gere previews do documento em tempo real",
                "Mostre o progresso atual do documento",
                "Destaque a se√ß√£o atual sendo trabalhada",
                "Formate o documento de forma profissional",
                "Atualize o preview sempre que uma nova se√ß√£o for conclu√≠da"
            ]
        )
    
    def run_workflow(self, *args, **kwargs):
        """Override do run_workflow para aceitar argumentos posicionais."""
        # Converter argumentos posicionais para kwargs
        if args:
            kwargs['message'] = args[0]
        return super().run_workflow(**kwargs)
    
    def run(self, **kwargs) -> Iterator[RunResponse]:
        """
        Executa o workflow de cria√ß√£o de documento.
        
        Args:
            **kwargs: Argumentos do workflow, incluindo 'message'
            
        Yields:
            Respostas do workflow
        """
        # Extrair message dos kwargs
        message = kwargs.get('message', '')
        if not message:
            yield RunResponse(content="Erro: Mensagem n√£o fornecida")
            return
        try:
            # Conectar ao banco de dados (vers√£o s√≠ncrona)
            # TODO: Implementar vers√£o s√≠ncrona da conex√£o
            # self.db.connect()
            
            # Por enquanto, simular comportamento para testes
            yield RunResponse(content="üîç Iniciando an√°lise do documento...")
            
            # Simular templates dispon√≠veis
            # TODO: Implementar busca s√≠ncrona de templates
            templates = []  # await self.db.get_templates_by_agent(self.agent_id)
            
            yield RunResponse(content="üìã Buscando templates dispon√≠veis...")
            
            yield RunResponse(content="üéØ Template selecionado: NDA Padr√£o")
            
            yield RunResponse(content="üìù Processando cl√°usulas do documento...")
            
            yield RunResponse(content="‚úÖ Documento processado com sucesso!")
            
            # TODO: Implementar l√≥gica completa s√≠ncrona
            # 1. Search for available templates
            # 2. Select appropriate template
            # 3. Process document clauses
            # 4. Generate final document
                    
        except Exception as e:
            yield RunResponse(content=f"Erro ao processar workflow: {str(e)}")
        finally:
            # TODO: Fechar conex√£o com banco (vers√£o s√≠ncrona)
            # self.db.close()
            pass
    
    async def _process_current_clause(self, doc_info: DocumentInfo, message: str) -> Iterator[RunResponse]:
        """
        Processa a cl√°usula atual do documento.
        
        Args:
            doc_info: Informa√ß√µes do documento
            message: Mensagem do usu√°rio
            
        Yields:
            Respostas do processamento
        """
        current_clause = doc_info.current_clause
        
        # Verificar se √© cl√°usula opcional
        if current_clause.type == 'optional':
            # Perguntar se usu√°rio quer incluir esta se√ß√£o
            yield RunResponse(
                content=f"A se√ß√£o **{current_clause.section_name}** √© opcional. Voc√™ gostaria de inclu√≠-la no documento? (sim/n√£o)"
            )
            # Aguardar resposta do usu√°rio para decidir se pula ou continua
            return
        
        # Usar o system_prompt da cl√°usula para formular a pergunta
        clause_prompt = current_clause.system_prompt
        
        # Adicionar informa√ß√µes sobre placeholders se existirem
        if current_clause.placeholders:
            placeholder_info = "\n\nInforma√ß√µes necess√°rias:\n"
            for field_name, field_config in current_clause.placeholders.items():
                required_text = "(obrigat√≥rio)" if field_config.get('required', False) else "(opcional)"
                placeholder_info += f"- **{field_name}**: {field_config.get('description', 'Campo n√£o descrito')} {required_text}\n"
            clause_prompt += placeholder_info
        
        # Processar com o agente de cria√ß√£o de documentos
        async for response in self.document_creator_team.run(
            f"Se√ß√£o: {current_clause.section_name}\n\n{clause_prompt}\n\nMensagem do usu√°rio: {message}",
            stream=True
        ):
            yield response
    
    async def _select_template(self, templates: List[DocTemplate], message: str) -> Iterator[RunResponse]:
        """
        Ajuda o usu√°rio a selecionar um template.
        
        Args:
            templates: Lista de templates dispon√≠veis
            message: Mensagem do usu√°rio
            
        Yields:
            Respostas do processo de sele√ß√£o
        """
        template_options = "\n".join([
            f"**{i+1}. {t.name}** - {t.description}" 
            for i, t in enumerate(templates)
        ])
        
        prompt = f"""
        Tenho capacidade de gerar os seguintes tipos de documento:

        {template_options}

        Qual tipo de documento voc√™ gostaria de criar? Responda com o n√∫mero da op√ß√£o.
        """
        
        # Usar o template selector para ajudar o usu√°rio
        async for response in self.template_selector.run(prompt, stream=True):
            yield response
        
        # Aguardar resposta do usu√°rio para selecionar template
        # Isso seria tratado pelo gerenciamento de estado da sess√£o
    
    async def _process_document_response(self, user_response: str) -> Iterator[RunResponse]:
        """
        Processa a resposta do usu√°rio para a cl√°usula atual.
        
        Args:
            user_response: Resposta do usu√°rio
            
        Yields:
            Respostas do processamento
        """
        try:
            # Obter informa√ß√µes do documento do estado da sess√£o
            doc_info_dict = self.session_state.get('document_info')
            if not doc_info_dict:
                yield RunResponse(content="Erro: Informa√ß√µes do documento n√£o encontradas. Por favor, inicie um novo documento.")
                return
            
            # Reconstruir DocumentInfo
            doc_info = DocumentInfo(**doc_info_dict)
            current_clause = doc_info.current_clause
            
            # Processar resposta com valida√ß√£o
            filled_content = await self._validate_and_fill_clause(current_clause, user_response)
            
            if not filled_content:
                yield RunResponse(content="Por favor, forne√ßa as informa√ß√µes necess√°rias para esta se√ß√£o.")
                return
            
            # Usar ferramenta AGNO para processar resposta
            db_url = os.getenv("DATABASE_URL")
            updated_doc_info = await process_clause_response(
                db_url, 
                doc_info.id, 
                current_clause.id, 
                user_response, 
                filled_content
            )
            
            # Atualizar estado da sess√£o
            self.session_state['document_info'] = updated_doc_info.dict()
            
            # Verificar se documento foi conclu√≠do
            if updated_doc_info.status == 'completed':
                yield RunResponse(content="üéâ Documento conclu√≠do com sucesso!")
                
                # Gerar documento final
                final_document = await complete_document(db_url, updated_doc_info.id)
                yield RunResponse(content=f"\n\n**Documento Final:**\n\n{final_document}")
                
                # Limpar estado da sess√£o
                self.session_state.pop('document_info', None)
                
            else:
                # Continuar para pr√≥xima cl√°usula
                yield RunResponse(
                    content=f"‚úÖ Se√ß√£o **{current_clause.section_name}** conclu√≠da. Progresso: {updated_doc_info.progress['percentage']}%"
                )
                
                async for response in self._process_current_clause(updated_doc_info, ""):
                    yield response
                
        except Exception as e:
            yield RunResponse(content=f"Erro ao processar resposta: {str(e)}")
    
    async def _validate_and_fill_clause(self, clause: ClauseInfo, user_response: str) -> str:
        """
        Valida e preenche uma cl√°usula com a resposta do usu√°rio.
        
        Args:
            clause: Informa√ß√µes da cl√°usula
            user_response: Resposta do usu√°rio
            
        Returns:
            Conte√∫do preenchido da cl√°usula
        """
        # Usar template base se dispon√≠vel
        if clause.content_template:
            filled_content = clause.content_template
            
            # Substituir placeholders se existirem
            if clause.placeholders:
                # Aqui seria implementada l√≥gica mais sofisticada de extra√ß√£o
                # Por enquanto, usar resposta do usu√°rio diretamente
                for field_name in clause.placeholders.keys():
                    placeholder = f"{{{field_name}}}"
                    if placeholder in filled_content:
                        filled_content = filled_content.replace(placeholder, user_response)
            
            return filled_content
        else:
            # Se n√£o h√° template, usar resposta do usu√°rio diretamente
            return user_response


# A classe NDADatabaseCrud agora est√° implementada em database/nda_database.py
